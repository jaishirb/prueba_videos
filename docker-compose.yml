version: '3'

services:
  backend:
    restart: on-failure
    build: .
    env_file: .env
    command: uwsgi --socket=:8002 --module=project.wsgi:application --py-autoreload=1
    volumes:
      - .:/app
      - ./static:/app/static
    depends_on:
      - database
    networks:
      - webnet
      - redisnet
      - db_network
    links:
      - redis
      - database:database

  websockets:
    restart: on-failure
    build: .
    command: daphne project.asgi:channel_layer --port 8003 -b 0.0.0.0
    volumes:
      - .:/app
    depends_on:
      - database
    networks:
      - webnet
      - redisnet
      - db_network
    links:
      - redis
      - database:database

  redis:
    image: redis:latest
    restart: always
    volumes:
      - redisdata:/data
    networks:
      - redisnet
    ports:
      - '6379:6379'
    command: redis-server

  database:
    image: kartoza/postgis:12.0
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env
    expose:
      - '5432'
    ports:
      - '5433:5432'
    restart: on-failure
    networks:
      db_network:

  nginx:
    image: nginx:1.15.0
    depends_on:
      - websockets
      - backend
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./static:/app/static
      - ./app:/app
    networks:
      - webnet
    ports:
      - '3002:80'

  worker:
    build: .
    volumes:
      - .:/app
    env_file: .env
    restart: on-failure
    command: celery -A project worker --concurrency=10 -l info
    links:
      - redis
      - database
    networks:
      - redisnet
      - db_network

  beat:
    build: .
    volumes:
      - .:/app
    env_file: .env
    restart: on-failure
    command: celery -A project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=/home/app/celery.pid
    links:
      - redis
      - database
    networks:
      - redisnet
      - db_network

networks:
  webnet:
  redisnet:
  db_network:

volumes:
  postgres_data:
  redisdata: